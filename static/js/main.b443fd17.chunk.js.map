{"version":3,"sources":["components/DataStartWars.jsx","components/Details.jsx","components/Characters.jsx","components/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["GET_INFO_SW","gql","Details","character","className","class","eyeColor","hairColor","skinColor","birthYear","vehicleConnection","vehicles","map","vehicle","name","id","Characters","useState","selectedCharacter","setSelectedCharacter","useQuery","loading","error","data","allPeople","people","onClick","species","homeworld","Header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAEaA,EAAcC,cAAH,6X,OC8CTC,EA9CC,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACjB,OACE,mCACGA,EACC,sBAAwBC,UAAU,kBAAlC,UACE,qDACA,qBAAIC,MAAM,8BAAV,UACE,qBAAIA,MAAM,kBAAV,sBAEE,sBAAMD,UAAU,yBAAhB,SACGD,EAAUG,cAGf,qBAAID,MAAM,kBAAV,uBAEE,sBAAMD,UAAU,yBAAhB,SACGD,EAAUI,eAGf,qBAAIF,MAAM,kBAAV,uBAEE,sBAAMD,UAAU,yBAAhB,SACGD,EAAUK,eAGf,qBAAIH,MAAM,kBAAV,uBAEE,sBAAMD,UAAU,yBAAhB,SACGD,EAAUM,kBAIjB,0CACA,oBAAIJ,MAAM,8BAAV,SACGF,EAAUO,kBAAkBC,SAASC,KAAI,SAACC,GAAD,OACxC,qBAAIR,MAAM,kBAAV,cAA8BQ,EAAQC,eA/BlCX,EAAUY,IAoCpB,M,gBCKOC,EAxCI,WAAM,MAE2BC,mBAAS,MAFpC,mBAEhBC,EAFgB,KAEGC,EAFH,OAIUC,mBAASpB,GAAlCqB,EAJe,EAIfA,QAASC,EAJM,EAINA,MAAOC,EAJD,EAICA,KAExB,OAAIF,EAEA,+BACE,cAAC,IAAD,IADF,iBAIAC,EAAc,kDAGhB,uBAAMlB,UAAU,MAAhB,UACE,qBAAKA,UAAU,kBAAf,SACGmB,EAAKC,UAAUC,OAAOb,KAAI,SAACT,GAAD,OACzB,sBACEC,UAAU,OAEVsB,QAAS,kBAAMP,EAAqBhB,IAHtC,UAKE,cAAC,IAAD,CAAmBC,UAAU,mCAC7B,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,aAAd,SAA4BD,EAAUW,OACtC,mBAAGV,UAAU,YAAb,SACyB,OAAtBD,EAAUwB,QACPxB,EAAUwB,QAAQb,KAAO,SAAWX,EAAUyB,UAAUd,KACxD,cAAqBX,EAAUyB,UAAUd,YAT5CX,EAAUY,SAerB,cAAC,EAAD,CAASZ,UAAWe,QChCXW,EARA,WACb,OACE,iCACE,6DCQSC,MATf,WACE,OACE,sBAAK1B,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCIS2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCARQ,EAAS,IAAIC,eAAa,CAC9BC,IAAK,6DACLC,MAAO,IAAIC,kBAGbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,cAAC,iBAAD,CAAgBP,OAAQA,EAAxB,SACE,cAAC,EAAD,QAGFQ,SAASC,eAAe,SAM1BlB,M","file":"static/js/main.b443fd17.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_INFO_SW = gql`\r\n  query {\r\n    allPeople {\r\n      people {\r\n        id\r\n        name\r\n        species {\r\n          name\r\n        }\r\n        homeworld {\r\n          name\r\n        }\r\n        eyeColor\r\n        hairColor\r\n        skinColor\r\n        birthYear\r\n        vehicleConnection {\r\n          vehicles {\r\n            name\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\n\nconst Details = ({ character }) => {\n  return (\n    <>\n      {character ? (\n        <div key={character.id} className=\"col-12 col-lg-9\">\n          <h4>General Information</h4>\n          <ul class=\"list-group list-group-flush\">\n            <li class=\"list-group-item\">\n              Eye color\n              <span className=\"float-end top-50 end-0\">\n                {character.eyeColor}\n              </span>\n            </li>\n            <li class=\"list-group-item\">\n              Hair color\n              <span className=\"float-end top-50 end-0\">\n                {character.hairColor}\n              </span>\n            </li>\n            <li class=\"list-group-item\">\n              Skin color\n              <span className=\"float-end top-50 end-0\">\n                {character.skinColor}\n              </span>\n            </li>\n            <li class=\"list-group-item\">\n              Birth Year\n              <span className=\"float-end top-50 end-0\">\n                {character.birthYear}\n              </span>\n            </li>\n          </ul>\n          <h4>Vehicles</h4>\n          <ul class=\"list-group list-group-flush\">\n            {character.vehicleConnection.vehicles.map((vehicle) => (\n              <li class=\"list-group-item\"> {vehicle.name}</li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n\nexport default Details;\n","import React, { useState } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_INFO_SW } from \"./DataStartWars\";\r\nimport Details from \"./Details\";\r\nimport { VscLoading } from \"react-icons/vsc\";\r\nimport { IoIosArrowForward } from \"react-icons/io\";\r\n\r\nconst Characters = () => {\r\n  //Select each card and save its data\r\n  const [selectedCharacter, setSelectedCharacter] = useState(null);\r\n  // Get 3 parameters from graphql\r\n  const { loading, error, data } = useQuery(GET_INFO_SW);\r\n\r\n  if (loading)\r\n    return (\r\n      <h1>\r\n        <VscLoading /> Loading...\r\n      </h1>\r\n    );\r\n  if (error) return <p>Fail to Load Data</p>;\r\n\r\n  return (\r\n    <main className=\"row\">\r\n      <div className=\"col-12 col-lg-3\">\r\n        {data.allPeople.people.map((character) => (\r\n          <div\r\n            className=\"card\"\r\n            key={character.id}\r\n            onClick={() => setSelectedCharacter(character)}\r\n          >\r\n            <IoIosArrowForward className=\"position-absolute top-50 end-0\" />\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{character.name}</h5>\r\n              <p className=\"card-text\">\r\n                {character.species !== null\r\n                  ? character.species.name + \" from \" + character.homeworld.name\r\n                  : \"Human\" + \" from \" + character.homeworld.name}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <Details character={selectedCharacter} />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Characters;\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <h1>Ravn Stars Wars Registry</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import \"../src/styles/App.scss\";\nimport Characters from \"./components/Characters\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Characters />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: 'https://swapi-graphql.netlify.app/.netlify/functions/index',\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <React.StrictMode>\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}